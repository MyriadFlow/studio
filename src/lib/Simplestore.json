{
	"_format": "hh-sol-artifact-1",
	"contractName": "AccessMaster",
	"sourceName": "contracts/accessmaster/AccessMaster.sol",
	"abi": [
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_payoutAddress",
					"type": "address"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [],
			"name": "AccessControlBadConfirmation",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "neededRole",
					"type": "bytes32"
				}
			],
			"name": "AccessControlUnauthorizedAccount",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "previousAdminRole",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "newAdminRole",
					"type": "bytes32"
				}
			],
			"name": "RoleAdminChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "RoleGranted",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "RoleRevoked",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "DEFAULT_ADMIN_ROLE",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "FLOW_ADMIN_ROLE",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "FLOW_CREATOR_ROLE",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "FLOW_OPERATOR_ROLE",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "getPayoutAddress",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				}
			],
			"name": "getRoleAdmin",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "uint256",
					"name": "index",
					"type": "uint256"
				}
			],
			"name": "getRoleMember",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				}
			],
			"name": "getRoleMemberCount",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "grantRole",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "hasRole",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "user",
					"type": "address"
				}
			],
			"name": "isAdmin",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "user",
					"type": "address"
				}
			],
			"name": "isCreator",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "user",
					"type": "address"
				}
			],
			"name": "isOperator",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "callerConfirmation",
					"type": "address"
				}
			],
			"name": "renounceRole",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "role",
					"type": "bytes32"
				},
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "revokeRole",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "_payoutAddress",
					"type": "address"
				}
			],
			"name": "setPayoutAddress",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "bytes4",
					"name": "interfaceId",
					"type": "bytes4"
				}
			],
			"name": "supportsInterface",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "_name",
					"type": "string"
				}
			],
			"name": "updateName",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "string",
					"name": "_symbol",
					"type": "string"
				}
			],
			"name": "updateSymbol",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "version",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}
	],
	"bytecode": "0x60c0604052600f60809081526e26bc9020b1b1b2b9b9a6b0b9ba32b960891b60a0526002906200003090826200042b565b50604080518082019091526002815261414d60f01b60208201526003906200005990826200042b565b5034801562000066575f80fd5b50604051620012c9380380620012c98339810160408190526200008991620004f7565b620000a35f80516020620012898339815191528062000168565b620000cb5f80516020620012a98339815191525f805160206200128983398151915262000168565b620000f35f80516020620012698339815191525f80516020620012a983398151915262000168565b6200010d5f805160206200128983398151915233620001b2565b50620001285f80516020620012a983398151915233620001ed565b620001425f805160206200126983398151915233620001ed565b600480546001600160a01b0319166001600160a01b03929092169190911790556200051f565b5f82815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b5f80620001c084846200021b565b90508015620001e4575f848152600160205260409020620001e29084620002c6565b505b90505b92915050565b5f828152602081905260409020600101546200020981620002dc565b620002158383620001b2565b50505050565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16620002be575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620002753390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001620001e7565b505f620001e7565b5f620001e4836001600160a01b038416620002eb565b620002e8813362000332565b50565b5f818152600183016020526040812054620002be57508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155620001e7565b5f828152602081815260408083206001600160a01b038516845290915290205460ff16620003895760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440160405180910390fd5b5050565b634e487b7160e01b5f52604160045260245ffd5b600181811c90821680620003b657607f821691505b602082108103620003d557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200042657805f5260205f20601f840160051c81016020851015620004025750805b601f840160051c820191505b8181101562000423575f81556001016200040e565b50505b505050565b81516001600160401b038111156200044757620004476200038d565b6200045f81620004588454620003a1565b84620003db565b602080601f83116001811462000495575f84156200047d5750858301515b5f19600386901b1c1916600185901b178555620004ef565b5f85815260208120601f198616915b82811015620004c557888601518255948401946001909101908401620004a4565b5085821015620004e357878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f6020828403121562000508575f80fd5b81516001600160a01b0381168114620001e4575f80fd5b610d3c806200052d5f395ff3fe608060405234801561000f575f80fd5b506004361061013d575f3560e01c80637b75083c116100b45780639ea5722b116100795780639ea5722b146102d0578063a217fddf146102f7578063ca15c873146102fe578063d547741f14610311578063e554d23414610324578063efd4606514610335575f80fd5b80637b75083c1461026357806384da92a7146102775780639010d07c1461028a57806391d14854146102b557806395d89b41146102c8575f80fd5b806333ea51a81161010557806333ea51a8146101d657806336568abe146101e9578063537f5312146101fc57806354fd4d501461020f578063611ed8cb146102295780636d70f7ae14610250575f80fd5b806301ffc9a71461014157806306fdde0314610169578063248a9ca31461017e57806324d7806c146101ae5780632f2ff15d146101c1575b5f80fd5b61015461014f366004610995565b610348565b60405190151581526020015b60405180910390f35b610171610372565b60405161016091906109bc565b6101a061018c366004610a08565b5f9081526020819052604090206001015490565b604051908152602001610160565b6101546101bc366004610a3a565b6103fe565b6101d46101cf366004610a53565b610416565b005b6101d46101e4366004610a3a565b610440565b6101d46101f7366004610a53565b6104d6565b6101d461020a366004610a91565b61050e565b610217600181565b60405160ff9091168152602001610160565b6101a07f9e62e2fe49176359be731211a93beb8a4b41d6d0345b62f64c4f4e7b56ba503281565b61015461025e366004610a3a565b610531565b6101a05f80516020610ce783398151915281565b6101d4610285366004610a91565b61055c565b61029d610298366004610b3c565b61057f565b6040516001600160a01b039091168152602001610160565b6101546102c3366004610a53565b61059d565b6101716105c5565b6101a07fb75d0c3e4b0e01fa592ef743acc55a0b7765ffd271595abd71aa99cbf3518c0781565b6101a05f81565b6101a061030c366004610a08565b6105d2565b6101d461031f366004610a53565b6105e8565b6004546001600160a01b031661029d565b610154610343366004610a3a565b61060c565b5f6001600160e01b03198216635a05180f60e01b148061036c575061036c82610637565b92915050565b6002805461037f90610b5c565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab90610b5c565b80156103f65780601f106103cd576101008083540402835291602001916103f6565b820191905f5260205f20905b8154815290600101906020018083116103d957829003601f168201915b505050505081565b5f61036c5f80516020610ce78339815191528361059d565b5f828152602081905260409020600101546104308161066b565b61043a8383610678565b50505050565b6104575f80516020610ce78339815191523361059d565b6104b45760405162461bcd60e51b8152602060048201526024808201527f4163636573734d61737465723a2055736572206973206e6f7420617574686f726044820152631a5e995960e21b60648201526084015b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811633146104ff5760405163334bd91960e11b815260040160405180910390fd5b61050982826106ab565b505050565b5f80516020610ce78339815191526105258161066b565b60036105098382610bdf565b5f61036c7f9e62e2fe49176359be731211a93beb8a4b41d6d0345b62f64c4f4e7b56ba50328361059d565b5f80516020610ce78339815191526105738161066b565b60026105098382610bdf565b5f82815260016020526040812061059690836106d6565b9392505050565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6003805461037f90610b5c565b5f81815260016020526040812061036c906106e1565b5f828152602081905260409020600101546106028161066b565b61043a83836106ab565b5f61036c7fb75d0c3e4b0e01fa592ef743acc55a0b7765ffd271595abd71aa99cbf3518c078361059d565b5f6001600160e01b03198216637965db0b60e01b148061036c57506301ffc9a760e01b6001600160e01b031983161461036c565b61067581336106ea565b50565b5f806106848484610727565b90508015610596575f8481526001602052604090206106a390846107b6565b509392505050565b5f806106b784846107ca565b90508015610596575f8481526001602052604090206106a39084610833565b5f6105968383610847565b5f61036c825490565b6106f4828261059d565b6107235760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016104ab565b5050565b5f610732838361059d565b6107af575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556107673390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161036c565b505f61036c565b5f610596836001600160a01b03841661086d565b5f6107d5838361059d565b156107af575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161036c565b5f610596836001600160a01b0384166108b2565b5f825f01828154811061085c5761085c610c9f565b905f5260205f200154905092915050565b5f8181526001830160205260408120546107af57508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915561036c565b5f818152600183016020526040812054801561098c575f6108d4600183610cb3565b85549091505f906108e790600190610cb3565b9050808214610946575f865f01828154811061090557610905610c9f565b905f5260205f200154905080875f01848154811061092557610925610c9f565b5f918252602080832090910192909255918252600188019052604090208390555b855486908061095757610957610cd2565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f90556001935050505061036c565b5f91505061036c565b5f602082840312156109a5575f80fd5b81356001600160e01b031981168114610596575f80fd5b5f602080835283518060208501525f5b818110156109e8578581018301518582016040015282016109cc565b505f604082860101526040601f19601f8301168501019250505092915050565b5f60208284031215610a18575f80fd5b5035919050565b80356001600160a01b0381168114610a35575f80fd5b919050565b5f60208284031215610a4a575f80fd5b61059682610a1f565b5f8060408385031215610a64575f80fd5b82359150610a7460208401610a1f565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610aa1575f80fd5b813567ffffffffffffffff80821115610ab8575f80fd5b818401915084601f830112610acb575f80fd5b813581811115610add57610add610a7d565b604051601f8201601f19908116603f01168101908382118183101715610b0557610b05610a7d565b81604052828152876020848701011115610b1d575f80fd5b826020860160208301375f928101602001929092525095945050505050565b5f8060408385031215610b4d575f80fd5b50508035926020909101359150565b600181811c90821680610b7057607f821691505b602082108103610b8e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561050957805f5260205f20601f840160051c81016020851015610bb95750805b601f840160051c820191505b81811015610bd8575f8155600101610bc5565b5050505050565b815167ffffffffffffffff811115610bf957610bf9610a7d565b610c0d81610c078454610b5c565b84610b94565b602080601f831160018114610c40575f8415610c295750858301515b5f19600386901b1c1916600185901b178555610c97565b5f85815260208120601f198616915b82811015610c6e57888601518255948401946001909101908401610c4f565b5085821015610c8b57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52603260045260245ffd5b8181038181111561036c57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603160045260245ffdfe8f882e9b3b0c043c8507802fbb9a0ed808c8f0587361ab18424493e6841512a8a264697066735822122062528c5b87ce8e65e5ebefbef9af6a53f43140fc338e10d583502b88f284dc6a64736f6c63430008180033b75d0c3e4b0e01fa592ef743acc55a0b7765ffd271595abd71aa99cbf3518c078f882e9b3b0c043c8507802fbb9a0ed808c8f0587361ab18424493e6841512a89e62e2fe49176359be731211a93beb8a4b41d6d0345b62f64c4f4e7b56ba5032",
	"deployedBytecode": "0x608060405234801561000f575f80fd5b506004361061013d575f3560e01c80637b75083c116100b45780639ea5722b116100795780639ea5722b146102d0578063a217fddf146102f7578063ca15c873146102fe578063d547741f14610311578063e554d23414610324578063efd4606514610335575f80fd5b80637b75083c1461026357806384da92a7146102775780639010d07c1461028a57806391d14854146102b557806395d89b41146102c8575f80fd5b806333ea51a81161010557806333ea51a8146101d657806336568abe146101e9578063537f5312146101fc57806354fd4d501461020f578063611ed8cb146102295780636d70f7ae14610250575f80fd5b806301ffc9a71461014157806306fdde0314610169578063248a9ca31461017e57806324d7806c146101ae5780632f2ff15d146101c1575b5f80fd5b61015461014f366004610995565b610348565b60405190151581526020015b60405180910390f35b610171610372565b60405161016091906109bc565b6101a061018c366004610a08565b5f9081526020819052604090206001015490565b604051908152602001610160565b6101546101bc366004610a3a565b6103fe565b6101d46101cf366004610a53565b610416565b005b6101d46101e4366004610a3a565b610440565b6101d46101f7366004610a53565b6104d6565b6101d461020a366004610a91565b61050e565b610217600181565b60405160ff9091168152602001610160565b6101a07f9e62e2fe49176359be731211a93beb8a4b41d6d0345b62f64c4f4e7b56ba503281565b61015461025e366004610a3a565b610531565b6101a05f80516020610ce783398151915281565b6101d4610285366004610a91565b61055c565b61029d610298366004610b3c565b61057f565b6040516001600160a01b039091168152602001610160565b6101546102c3366004610a53565b61059d565b6101716105c5565b6101a07fb75d0c3e4b0e01fa592ef743acc55a0b7765ffd271595abd71aa99cbf3518c0781565b6101a05f81565b6101a061030c366004610a08565b6105d2565b6101d461031f366004610a53565b6105e8565b6004546001600160a01b031661029d565b610154610343366004610a3a565b61060c565b5f6001600160e01b03198216635a05180f60e01b148061036c575061036c82610637565b92915050565b6002805461037f90610b5c565b80601f01602080910402602001604051908101604052809291908181526020018280546103ab90610b5c565b80156103f65780601f106103cd576101008083540402835291602001916103f6565b820191905f5260205f20905b8154815290600101906020018083116103d957829003601f168201915b505050505081565b5f61036c5f80516020610ce78339815191528361059d565b5f828152602081905260409020600101546104308161066b565b61043a8383610678565b50505050565b6104575f80516020610ce78339815191523361059d565b6104b45760405162461bcd60e51b8152602060048201526024808201527f4163636573734d61737465723a2055736572206973206e6f7420617574686f726044820152631a5e995960e21b60648201526084015b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811633146104ff5760405163334bd91960e11b815260040160405180910390fd5b61050982826106ab565b505050565b5f80516020610ce78339815191526105258161066b565b60036105098382610bdf565b5f61036c7f9e62e2fe49176359be731211a93beb8a4b41d6d0345b62f64c4f4e7b56ba50328361059d565b5f80516020610ce78339815191526105738161066b565b60026105098382610bdf565b5f82815260016020526040812061059690836106d6565b9392505050565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6003805461037f90610b5c565b5f81815260016020526040812061036c906106e1565b5f828152602081905260409020600101546106028161066b565b61043a83836106ab565b5f61036c7fb75d0c3e4b0e01fa592ef743acc55a0b7765ffd271595abd71aa99cbf3518c078361059d565b5f6001600160e01b03198216637965db0b60e01b148061036c57506301ffc9a760e01b6001600160e01b031983161461036c565b61067581336106ea565b50565b5f806106848484610727565b90508015610596575f8481526001602052604090206106a390846107b6565b509392505050565b5f806106b784846107ca565b90508015610596575f8481526001602052604090206106a39084610833565b5f6105968383610847565b5f61036c825490565b6106f4828261059d565b6107235760405163e2517d3f60e01b81526001600160a01b0382166004820152602481018390526044016104ab565b5050565b5f610732838361059d565b6107af575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556107673390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600161036c565b505f61036c565b5f610596836001600160a01b03841661086d565b5f6107d5838361059d565b156107af575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a450600161036c565b5f610596836001600160a01b0384166108b2565b5f825f01828154811061085c5761085c610c9f565b905f5260205f200154905092915050565b5f8181526001830160205260408120546107af57508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915561036c565b5f818152600183016020526040812054801561098c575f6108d4600183610cb3565b85549091505f906108e790600190610cb3565b9050808214610946575f865f01828154811061090557610905610c9f565b905f5260205f200154905080875f01848154811061092557610925610c9f565b5f918252602080832090910192909255918252600188019052604090208390555b855486908061095757610957610cd2565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f90556001935050505061036c565b5f91505061036c565b5f602082840312156109a5575f80fd5b81356001600160e01b031981168114610596575f80fd5b5f602080835283518060208501525f5b818110156109e8578581018301518582016040015282016109cc565b505f604082860101526040601f19601f8301168501019250505092915050565b5f60208284031215610a18575f80fd5b5035919050565b80356001600160a01b0381168114610a35575f80fd5b919050565b5f60208284031215610a4a575f80fd5b61059682610a1f565b5f8060408385031215610a64575f80fd5b82359150610a7460208401610a1f565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610aa1575f80fd5b813567ffffffffffffffff80821115610ab8575f80fd5b818401915084601f830112610acb575f80fd5b813581811115610add57610add610a7d565b604051601f8201601f19908116603f01168101908382118183101715610b0557610b05610a7d565b81604052828152876020848701011115610b1d575f80fd5b826020860160208301375f928101602001929092525095945050505050565b5f8060408385031215610b4d575f80fd5b50508035926020909101359150565b600181811c90821680610b7057607f821691505b602082108103610b8e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561050957805f5260205f20601f840160051c81016020851015610bb95750805b601f840160051c820191505b81811015610bd8575f8155600101610bc5565b5050505050565b815167ffffffffffffffff811115610bf957610bf9610a7d565b610c0d81610c078454610b5c565b84610b94565b602080601f831160018114610c40575f8415610c295750858301515b5f19600386901b1c1916600185901b178555610c97565b5f85815260208120601f198616915b82811015610c6e57888601518255948401946001909101908401610c4f565b5085821015610c8b57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52603260045260245ffd5b8181038181111561036c57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603160045260245ffdfe8f882e9b3b0c043c8507802fbb9a0ed808c8f0587361ab18424493e6841512a8a264697066735822122062528c5b87ce8e65e5ebefbef9af6a53f43140fc338e10d583502b88f284dc6a64736f6c63430008180033",
	"linkReferences": {},
	"deployedLinkReferences": {},
	"code": 
	"// SPDX-License-Identifier: MIT\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev The `account` is missing a role.\r\n     */\r\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\r\n\r\n    /**\r\n     * @dev The caller of a function is not the expected one.\r\n     *\r\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\r\n     */\r\n    error AccessControlBadConfirmation();\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `callerConfirmation`.\r\n     */\r\n    function renounceRole(bytes32 role, address callerConfirmation) external;\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```solidity\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```solidity\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\r\n * to enforce additional security measures for this role.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address account => bool) hasRole;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 role => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\r\n        return _roles[role].hasRole[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\r\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\r\n     * is missing `role`.\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert AccessControlUnauthorizedAccount(account, role);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `callerConfirmation`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\r\n        if (callerConfirmation != _msgSender()) {\r\n            revert AccessControlBadConfirmation();\r\n        }\r\n\r\n        _revokeRole(role, callerConfirmation);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].hasRole[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].hasRole[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable is IAccessControl {\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```solidity\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position is the index of the value in the `values` array plus 1.\r\n        // Position 0 is used to mean a value is not in the set.\r\n        mapping(bytes32 value => uint256) _positions;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._positions[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We cache the value's position to prevent multiple reads from the same storage slot\r\n        uint256 position = set._positions[value];\r\n\r\n        if (position != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 valueIndex = position - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (valueIndex != lastIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the lastValue to the index where the value to delete is\r\n                set._values[valueIndex] = lastValue;\r\n                // Update the tracked position of the lastValue (that was just moved)\r\n                set._positions[lastValue] = position;\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the tracked position for the deleted slot\r\n            delete set._positions[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._positions[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(bytes32 role => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\r\n        bool granted = super._grantRole(role, account);\r\n        if (granted) {\r\n            _roleMembers[role].add(account);\r\n        }\r\n        return granted;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\r\n        bool revoked = super._revokeRole(role, account);\r\n        if (revoked) {\r\n            _roleMembers[role].remove(account);\r\n        }\r\n        return revoked;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This Contract Module helps to deploy the\r\n * base Roles for the other flow contracts .\r\n * Every other Flow contract will retrieve the roles of the\r\n * ADMIN, OPERATOR, CREATOR, etc. from this.\r\n */\r\ncontract AccessMaster is AccessControlEnumerable {\r\n    string public name = \"My AccessMaster\";\r\n    string public symbol = \"AM\";\r\n    uint8 public constant version = 1;\r\n\r\n    address private payoutAddress;\r\n\r\n    bytes32 public constant FLOW_ADMIN_ROLE = keccak256(\"FLOW_ADMIN_ROLE\");\r\n    bytes32 public constant FLOW_OPERATOR_ROLE =\r\n        keccak256(\"FLOW_OPERATOR_ROLE\");\r\n    bytes32 public constant FLOW_CREATOR_ROLE = keccak256(\"FLOW_CREATOR_ROLE\");\r\n\r\n    constructor(address _payoutAddress) {\r\n        _setRoleAdmin(FLOW_ADMIN_ROLE, FLOW_ADMIN_ROLE);\r\n        _setRoleAdmin(FLOW_OPERATOR_ROLE, FLOW_ADMIN_ROLE);\r\n        _setRoleAdmin(FLOW_CREATOR_ROLE, FLOW_OPERATOR_ROLE);\r\n        _grantRole(FLOW_ADMIN_ROLE, _msgSender());\r\n        // add Admin to operator and Creator\r\n        grantRole(FLOW_OPERATOR_ROLE, _msgSender());\r\n        // assigning storefront publisher Wallet the Admin role\r\n        grantRole(FLOW_CREATOR_ROLE, _msgSender());\r\n\r\n        payoutAddress = _payoutAddress;\r\n    }\r\n\r\n    function updateName(\r\n        string memory _name\r\n    ) external onlyRole(FLOW_ADMIN_ROLE) {\r\n        name = _name;\r\n    }\r\n\r\n    function updateSymbol(\r\n        string memory _symbol\r\n    ) external onlyRole(FLOW_ADMIN_ROLE) {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    /// @dev to check if the address {User} is the ADMIN\r\n    function isAdmin(address user) external view returns (bool) {\r\n        return hasRole(FLOW_ADMIN_ROLE, user);\r\n    }\r\n\r\n    /// @dev to check if the address {User} is the OPERATOR\r\n    function isOperator(address user) external view returns (bool) {\r\n        return hasRole(FLOW_OPERATOR_ROLE, user);\r\n    }\r\n\r\n    /// @dev to check if the address {User} is the CREATOR\r\n    function isCreator(address user) external view returns (bool) {\r\n        return hasRole(FLOW_CREATOR_ROLE, user);\r\n    }\r\n\r\n    /// @dev Sets the payout address.\r\n    /// @param _payoutAddress The new address to receive funds from multiple contracts.\r\n    /// @notice Only the admin can set the payout address.\r\n    function setPayoutAddress(address _payoutAddress) external {\r\n        require(\r\n            hasRole(FLOW_ADMIN_ROLE, _msgSender()),\r\n            \"AccessMaster: User is not authorized\"\r\n        );\r\n        payoutAddress = _payoutAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the payout address defined by the admin.\r\n     * @return The payout address for receiving funds.\r\n     */\r\n    function getPayoutAddress() external view returns (address) {\r\n        return payoutAddress;\r\n    }\r\n}\r\n"
}